---
import Layout from '../layouts/Layout.astro';
import { getTeamMembers, urlFor } from '../utils/sanity';

// Fetch team members from Sanity CMS
let teamMembers = [];
let error = null;

try {
  teamMembers = await getTeamMembers();
} catch (e) {
  error = e.message;
  console.error('Error fetching team members:', e);
}

const groupOrder = ['pi', 'lab_manager', 'faculty', 'research_staff'] as const;
const groupTitles = {
  pi: 'Principal Investigator',
  lab_manager: 'Lab Management',
  faculty: 'Faculty & Fellows',
  research_staff: 'Research Staff'
};

// Group members by their role
const groupedMembers = groupOrder.reduce((acc, group) => {
  acc[group] = teamMembers.filter(member => member.group === group);
  return acc;
}, {} as Record<typeof groupOrder[number], typeof teamMembers>);
---

<Layout title="Our Team | Sheehan Lab">
  <main>
    <section class="page-header">
      <div class="header-bg"></div>
      <div class="header-overlay"></div>
      <div class="container">
        <h1>Our Team</h1>
        <p>Meet our passionate team of researchers</p>
      </div>
    </section>

    <div id="modal-overlay" class="modal-overlay"></div>

    {error ? (
      <section class="error-section">
        <div class="container">
          <div class="error-message">
            <h2>üîß Unable to load team data</h2>
            <p>Please ensure the Sanity CMS is properly configured.</p>
            <details>
              <summary>Technical details</summary>
              <p>{error}</p>
            </details>
          </div>
        </div>
      </section>
    ) : teamMembers.length === 0 ? (
      <section class="empty-section">
        <div class="container">
          <div class="empty-message">
            <h2>üìù No team members found</h2>
            <p>Add team members through the Sanity Studio and ensure they are "Active".</p>
          </div>
        </div>
      </section>
    ) : (
      groupOrder.map(group => {
        const members = groupedMembers[group];
        if (members.length === 0) return null;

        return (
          <section class={`team-section ${group}`}>
            <div class="container">
              <h2 class="section-title">{groupTitles[group]}</h2>
              <div class="team-grid">
                {members.map((member, idx) => (
                  <div class="team-member" data-member-card data-member-idx={group + '-' + idx}>
                    <div class="member-card">
                      <div class="member-image">
                        {member.image ? (
                           <img src={urlFor(member.image).width(400).height(400).quality(85).url()} alt={`${member.name} headshot`} />
                        ) : (
                           <img src="/images/headshots/placeholder-headshot.png" alt="Placeholder headshot" />
                        )}
                      </div>
                      <div class="member-info">
                        <h3>{member.name}</h3>
                        <p class="role">{member.role}</p>
                        <button class="expand-button" aria-label="Show more details">
                            <span class="icon">‚Üì</span>
                        </button>
                      </div>
                      <div class="member-details">
                        <div class="bio-section">
                          {member.bio && member.bio.split('\n\n').map(paragraph => <p>{paragraph}</p>)}
                        </div>
                        <a href={`mailto:${member.email}`} class="contact-email">
                          Contact
                        </a>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </section>
        );
      })
    )}

  </main>
</Layout>

<style>
:root {
  --emory-primary: #002878;
  --emory-secondary: #00A3E0;
  --background-light: #f8fafc;
  --text-dark: #2d3748;
  --text-light: #718096;
  --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --card-hover-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

.page-header {
  position: relative;
  background: none;
  color: white;
  padding: 16rem 0 12rem 0;
  margin-top: 60px;
  text-align: center;
  overflow: hidden;
}
.page-header .header-bg {
  position: absolute;
  top: 0; left: 0; width: 100%; height: 100%;
  background: url('/images/lab-team-photo-2024.jpg') center/cover no-repeat;
  z-index: 1;
}
.page-header .header-overlay {
  position: absolute;
  top: 0; left: 0; width: 100%; height: 100%;
  background: linear-gradient(rgba(0,40,120,0.7), rgba(0,20,60,0.7));
  z-index: 2;
}
.page-header .container {
  position: relative;
  z-index: 3;
}
.page-header h1 {
  font-size: 2.8rem;
  margin-bottom: 0.5rem;
  color: #fff;
  text-shadow: 0 2px 8px rgba(0,0,0,0.25);
}
.page-header p {
  font-size: 1.2rem;
  opacity: 0.95;
  color: #f8fafc;
  text-shadow: 0 1px 4px rgba(0,0,0,0.18);
}

/* Remove .lab-photo-section and related styles */
.lab-photo-section, .photo-container, .photo-caption { display: none !important; }

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1.25rem;
}

.team-section {
  padding: 4rem 0;
}

.team-section.pi {
  background: var(--background-light);
}

.section-title {
  font-size: 2rem;
  color: var(--emory-primary);
  text-align: center;
  margin-bottom: 3rem;
  position: relative;
}

.section-title::after {
  content: '';
  position: absolute;
  bottom: -10px;
  left: 50%;
  transform: translateX(-50%);
  width: 60px;
  height: 3px;
  background: var(--emory-secondary);
}

.team-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  gap: 2.5rem;
  width: 100%;
  margin: 0 auto;
}

.team-member {
  position: relative;
}

.member-card {
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: var(--card-shadow);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  display: grid;
  grid-template-columns: 120px 1fr;
  gap: 0 1.5rem;
  padding: 1.5rem;
  text-align: left;
  align-items: start;
}

.team-member:hover .member-card {
  transform: translateY(-5px);
  box-shadow: var(--card-hover-shadow);
}

.member-image {
  width: 100%;
  height: 120px;
  min-width: 100px;
  max-width: 120px;
  position: relative;
  grid-row: 1 / span 2;
  align-self: start;
  padding-top: 0;
}

.member-image img {
  position: static;
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 8px;
}

.member-info {
  grid-column: 2;
  text-align: left;
  padding: 0;
  align-self: start;
  position: relative;
}

.member-info h3 {
  font-size: 1.25rem;
  color: var(--text-dark);
  margin: 0;
}

.member-info .role {
  color: var(--text-light);
  font-size: 1rem;
  margin-top: 0.25rem;
}

.member-details {
  grid-column: 2;
  padding: 0;
  font-size: 0.95rem;
  line-height: 1.6;
  color: var(--text-dark);
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.5s ease-in-out, padding 0.5s ease-in-out;
}

.team-member.expanded .member-details {
  max-height: 1000px; /* Large enough for any bio */
  padding: 1.5rem 0 0 0;
}

.bio-section {
  margin-bottom: 1rem;
}

.contact-email {
  display: inline-block;
  background-color: var(--emory-secondary);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  text-decoration: none;
  transition: background-color 0.3s ease;
}

.contact-email:hover {
  background-color: var(--emory-primary);
}

.expand-button {
  background: none;
  border: 1px solid #ccc;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: transform 0.3s ease;
  margin: 1.5rem 0 0 0;
}

.team-member.expanded .expand-button {
  transform: rotate(180deg);
}

/* Error and empty states */
.error-section, .empty-section {
  padding: 4rem 0;
}
.error-message, .empty-message {
  background: #fff5f5;
  color: #c53030;
  border: 1px solid #fed7d7;
  padding: 2rem;
  border-radius: 8px;
  text-align: center;
}
.empty-message {
    background: #f0f9ff;
    color: #2563eb;
    border-color: #bfdbfe;
}

@media (max-width: 900px) {
  .team-grid {
    grid-template-columns: 1fr;
  }
  .member-card {
    grid-template-columns: 1fr;
    padding: 1rem;
  }
  .member-image {
    height: 180px;
    max-width: 100%;
    margin-bottom: 1rem;
  }
}

.modal-overlay {
  display: none;
  position: fixed;
  top: 0; left: 0; width: 100vw; height: 100vh;
  background: rgba(0,0,0,0.55);
  z-index: 1000;
  transition: opacity 0.3s;
}
.team-member.focused {
  z-index: 1100;
}
.team-member.focused .member-card {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(1.08);
  width: 95vw;
  max-width: 600px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.25);
  background: white;
  border-radius: 16px;
  padding: 2.5rem 2rem 2rem 2rem;
  transition: all 0.7s cubic-bezier(.4,2,.3,1);
  z-index: 1200;
  display: block;
}
.team-member.focused .member-image {
  width: 160px;
  height: 160px;
  margin: 0 auto 1.5rem auto;
  display: block;
  float: none;
}
.team-member.focused .member-info {
  text-align: center;
  padding: 0;
}
.team-member.focused .member-details {
  max-height: 1000px;
  padding: 1.5rem 0 0 0;
}
.team-member.focused .expand-button {
  display: none;
}
.close-modal {
  position: absolute;
  top: 1.2rem;
  right: 1.2rem;
  background: #fff;
  border: none;
  border-radius: 50%;
  width: 36px;
  height: 36px;
  font-size: 1.5rem;
  color: #333;
  cursor: pointer;
  box-shadow: 0 2px 8px rgba(0,0,0,0.12);
  z-index: 1300;
  transition: background 0.2s;
}
.close-modal:hover {
  background: #f0f0f0;
}
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const overlay = document.getElementById('modal-overlay');
    let focused = null;
    document.querySelectorAll('[data-member-card]').forEach(card => {
      const button = card.querySelector('.expand-button');
      if (button) {
        button.addEventListener('click', (e) => {
          e.stopPropagation();
          if (focused) {
            focused.classList.remove('focused');
            overlay.style.display = 'none';
            const oldClose = document.querySelector('.close-modal');
            if (oldClose) oldClose.remove();
          }
          card.classList.add('focused');
          overlay.style.display = 'block';
          // Add close button
          const closeBtn = document.createElement('button');
          closeBtn.className = 'close-modal';
          closeBtn.innerHTML = '&times;';
          closeBtn.onclick = (ev) => {
            card.classList.remove('focused');
            overlay.style.display = 'none';
            closeBtn.remove();
            focused = null;
          };
          card.querySelector('.member-card').appendChild(closeBtn);
          focused = card;
        });
      }
    });
    overlay.addEventListener('click', () => {
      if (focused) {
        focused.classList.remove('focused');
        overlay.style.display = 'none';
        const oldClose = document.querySelector('.close-modal');
        if (oldClose) oldClose.remove();
        focused = null;
      }
    });
    // ESC key closes modal
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && focused) {
        focused.classList.remove('focused');
        overlay.style.display = 'none';
        const oldClose = document.querySelector('.close-modal');
        if (oldClose) oldClose.remove();
        focused = null;
      }
    });
  });
</script> 